name: Dino Reserve CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: dinoreserve_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 🦕 Checkout code
        uses: actions/checkout@v3
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 📦 Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
      
      - name: 🧪 Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/dinoreserve_test
        run: |
          pytest test_main.py -v --cov=main --cov-report=xml --cov-report=term
      
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
  
  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 🦕 Checkout code
        uses: actions/checkout@v3
      
      - name: 📦 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json
      
      - name: 📥 Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: 🔍 Lint code
        working-directory: ./frontend
        run: npm run lint || true
      
      - name: 🏗️ Build application
        working-directory: ./frontend
        run: npm run build
      
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/dist
          retention-days: 7
  
  # Backend Lint
  backend-lint:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 🦕 Checkout code
        uses: actions/checkout@v3
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 📦 Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy
      
      - name: 🔍 Run flake8
        working-directory: ./backend
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
      
      - name: 🎨 Check code formatting with black
        working-directory: ./backend
        run: black --check . || true
  
  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - name: 🦕 Checkout code
        uses: actions/checkout@v3
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: 🏗️ Build backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: dinoreserve-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🏗️ Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          tags: dinoreserve-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: 🦕 Checkout code
        uses: actions/checkout@v3
      
      - name: 🚀 Deploy to staging
        run: |
          echo "🦕 Deploying to staging environment..."
          echo "Backend URL: https://staging-api.dinoreserve.com"
          echo "Frontend URL: https://staging.dinoreserve.com"
      
      - name: 📢 Notify deployment
        run: |
          echo "✅ Staging deployment complete!"
  
  # Deploy to production (on main branch with tag)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 🦕 Checkout code
        uses: actions/checkout@v3
      
      - name: 🚀 Deploy to production
        run: |
          echo "🦖 Deploying to production environment..."
          echo "Backend URL: https://api.dinoreserve.com"
          echo "Frontend URL: https://dinoreserve.com"
      
      - name: 📢 Notify deployment
        run: |
          echo "✅ Production deployment complete!"

# ============================================
# Additional workflow file: deploy.yml
# Save as: .github/workflows/deploy.yml

# name: Deploy to Server
# 
# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to deploy to'
#         required: true
#         type: choice
#         options:
#           - staging
#           - production
# 
# jobs:
#   deploy:
#     name: Deploy to ${{ github.event.inputs.environment }}
#     runs-on: ubuntu-latest
#     
#     steps:
#       - name: 🦕 Checkout code
#         uses: actions/checkout@v3
#       
#       - name: 📦 Set up SSH
#         uses: webfactory/ssh-agent@v0.8.0
#         with:
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#       
#       - name: 🚀 Deploy via SSH
#         run: |
#           ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
#             cd /var/www/dinoreserve
#             git pull origin main
#             docker-compose down
#             docker-compose up -d --build
#             docker-compose exec -T backend python manage.py migrate
#           ENDSSH
#       
#       - name: ✅ Deployment complete
#         run: echo "Deployed to ${{ github.event.inputs.environment }}"
